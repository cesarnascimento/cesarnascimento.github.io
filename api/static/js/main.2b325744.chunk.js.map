{"version":3,"sources":["components/Navbar.js","components/ApiItem.js","components/ApiComment.js","components/ApiTitle.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","ApiItem","props","classe","itemName","item","icone","ApiComment","usuario","data","ApiTitle","titulo","style","color","numero","api","baseUrl","client_id","client_secret","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleModal","user","nomeDoRepo","axios","get","then","repo","console","log","setState","githubRepo","isActive","state","loadMore","count","res","githubData","items","clicado","hasMoreItems","Modal","setAppElement","_this2","loader","components_Navbar","react_infinite_scroller_default","pageStart","bind","hasMore","map","name","index","key","id","src","owner","avatar_url","alt","components_ApiItem","login","description","stargazers_count","forks_count","onClick","lib_default","isOpen","onRequestClose","href","html_url","target","rel","components_ApiTitle","title","number","components_ApiComment","created_at","body","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2b325744.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../sass/Navbar.scss\";\n\nconst Navbar = () => {\n  return (\n    <nav>\n      <div className=\"card card-body mt-3 mb-3 text-center\">\n        <h1>Trabalhando com a API do Github</h1>\n        <p className=\"lead\">Abaixo segue a lista e as informações da API</p>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\n\nconst ApiItem = (props) => {\n  return (\n    <p className={props.classe}>\n      <strong>{props.itemName}</strong>\n      {props.item}\n      {props.icone}\n    </p>\n  );\n};\n\nexport default ApiItem;\n","import React from \"react\";\n\nconst ApiComment = (props) => {\n  return (\n    <p className={props.classe}>\n      <strong>{props.usuario}</strong> comentou em {props.data}\n    </p>\n  );\n};\n\nexport default ApiComment;\n","import React from \"react\";\n\nconst ApiTitle = (props) => {\n  const style = {\n    color: \"#a3aab1\"\n  };\n  return (\n    <p className={props.classe}>\n      <strong>\n        {props.titulo} <span style={style}>#{props.numero}</span>\n      </strong>\n    </p>\n  );\n};\n\nexport default ApiTitle;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Navbar from \"./components/Navbar\";\nimport Modal from \"react-modal\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport ApiItem from \"./components/ApiItem\";\nimport ApiComment from \"./components/ApiComment\";\nimport ApiTitle from \"./components/ApiTitle\";\nimport \"./App.scss\";\nimport \"./sass/Repositorio.scss\";\nimport \"./sass/PullRequest.scss\";\nimport \"./styles/Global.css\";\nimport \"./styles/Reboot.css\";\n\nconst api = {\n  baseUrl: \"https://api.github.com\",\n  client_id: \"a2a58519bc365d25a8ce\",\n  client_secret: \"8ef87d05b2aee0e1d1ad712d4f3d9008a84feff3\"\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      githubData: [],\n      count: 5,\n      isActive: false,\n      githubRepo: [],\n      hasMoreItems: true\n    };\n  }\n\n  componentDidMount() {\n    Modal.setAppElement(\"body\");\n  }\n\n  toggleModal = (user, nomeDoRepo) => {\n    axios\n      .get(api.baseUrl + \"/repos/\" + user + \"/\" + nomeDoRepo + \"/pulls\")\n      .then((repo) => {\n        console.log(\"repo\", repo);\n        this.setState({ githubRepo: repo.data });\n      });\n\n    this.setState({\n      isActive: !this.state.isActive\n    });\n  };\n\n  loadMore = (count) => {\n    axios\n      .get(\n        api.baseUrl +\n          \"/search/repositories?q=language:Java&sort=stars&page=1&per_page=\" +\n          count +\n          \"&client_id=\" +\n          api.client_id +\n          \"&client_secret=\" +\n          api.client_secret\n      )\n      .then((res) => {\n        console.log(\"res\", res);\n        this.setState({ githubData: res.data.items });\n      });\n  };\n\n  clicado = () => {\n    console.log(\"clicado\");\n    this.className = \"teste2\";\n  };\n\n  render() {\n    const { githubData } = this.state;\n    const { githubRepo } = this.state;\n    const loader = <div className=\"loader\">Loading...</div>;\n\n    return (\n      <div className=\"container App\">\n        <Navbar />\n        <InfiniteScroll\n          pageStart={1}\n          loadMore={this.loadMore.bind(this)}\n          hasMore={this.state.hasMoreItems}\n          loader={loader}\n        >\n          <div className=\"row bg-row\">\n            {githubData.map((name, index) => (\n              <div\n                className=\"col-sm-6 col-md-4 col-lg-3 repositorios\"\n                key={name.id}\n              >\n                <img\n                  src={name.owner.avatar_url}\n                  className=\"repo-image\"\n                  alt=\"Imagem do projeto\"\n                />\n                <div className=\"repo-content\">\n                  <ApiItem itemName=\"Projeto: \" item={name.name} />\n                  <ApiItem itemName=\"Autor: \" item={name.owner.login} />\n                  <ApiItem\n                    itemName=\"Descrição: \"\n                    item={name.description}\n                    classe=\"read-more\"\n                  />\n                  <ApiItem itemName=\"Stars: \" item={name.stargazers_count} />\n                  <ApiItem itemName=\"Forks: \" item={name.forks_count} />\n                  <div className=\"btn-container\">\n                    <button\n                      onClick={this.toggleModal.bind(\n                        this,\n                        name.owner.login,\n                        name.name\n                      )}\n                      className=\"myButton\"\n                    >\n                      Pull Request List\n                    </button>\n                  </div>\n                </div>\n                <Modal\n                  isOpen={this.state.isActive}\n                  onRequestClose={this.toggleModal}\n                >\n                  <div className=\"close\" onClick={this.toggleModal} />\n                  <div className=\"container\">\n                    <div className=\"row\">\n                      {githubRepo.map((name, index) => (\n                        <div key={name.id} className=\"col-md-12 pull-request\">\n                          <a\n                            href={name.html_url}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                          >\n                            <div className=\"row\">\n                              <div className=\"col-sm-2 col-md-2\">\n                                <img\n                                  src={name.user.avatar_url}\n                                  className=\"pull-image\"\n                                  alt=\"Avatar do usuário\"\n                                />\n                              </div>\n                              <div className=\"col-sm-10 col-md-10\">\n                                <div className=\"pull-content\">\n                                  <ApiTitle\n                                    titulo={name.title}\n                                    numero={name.number}\n                                    classe=\"pull-title\"\n                                  />\n                                  <ApiComment\n                                    classe=\"repo-user\"\n                                    usuario={name.user.login}\n                                    data={name.created_at}\n                                  />\n                                  <ApiItem\n                                    item={name.body}\n                                    classe=\"pull-body\"\n                                  />\n                                </div>\n                              </div>\n                            </div>\n                          </a>\n                          <hr />\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </Modal>\n              </div>\n            ))}\n          </div>\n        </InfiniteScroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}